# This is the lists file that should be used during development for the best
# discovery in the developer's choice of IDE.
cmake_minimum_required(VERSION 3.14)

project(FunctionalPlusDevelopment)

# Test should be added first, because it disables the warning guard
add_subdirectory(
    "${PROJECT_SOURCE_DIR}/../test"
    "${PROJECT_BINARY_DIR}/test"
)

# This project supports CMake 3.2 as a minimum version, so there is no way to
# protect against multiple inclusions other than to turn add_subdirectory into
# a noop with code injection at project() calls.
# If at least CMake 3.11 were to be supported, then the FetchContent module has
# this kind of protection built into it.
set(
    CMAKE_PROJECT_FunctionalPlusExamples_INCLUDE
    "${PROJECT_SOURCE_DIR}/noop.cmake"
    CACHE
    INTERNAL
    "Protect against multiple inclusions using add_subdirectory"
)

add_subdirectory(
    "${PROJECT_SOURCE_DIR}/../examples"
    "${PROJECT_BINARY_DIR}/examples"
)

# INTERFACE targets can't provide sources, so not all IDEs can properly
# discover files belonging to targets. This is a portable way to do just that.
set(
    fplus_headers
    "${FunctionalPlus_SOURCE_DIR}/include/fplus/benchmark_session.hpp"
    "${FunctionalPlus_SOURCE_DIR}/include/fplus/compare.hpp"
    "${FunctionalPlus_SOURCE_DIR}/include/fplus/composition.hpp"
    "${FunctionalPlus_SOURCE_DIR}/include/fplus/container_common.hpp"
    "${FunctionalPlus_SOURCE_DIR}/include/fplus/container_properties.hpp"
    "${FunctionalPlus_SOURCE_DIR}/include/fplus/container_traits.hpp"
    "${FunctionalPlus_SOURCE_DIR}/include/fplus/curry.hpp"
    "${FunctionalPlus_SOURCE_DIR}/include/fplus/curry_instances.autogenerated_defines"
    "${FunctionalPlus_SOURCE_DIR}/include/fplus/extrapolate.hpp"
    "${FunctionalPlus_SOURCE_DIR}/include/fplus/filter.hpp"
    "${FunctionalPlus_SOURCE_DIR}/include/fplus/fplus.hpp"
    "${FunctionalPlus_SOURCE_DIR}/include/fplus/function_traits.hpp"
    "${FunctionalPlus_SOURCE_DIR}/include/fplus/fwd.hpp"
    "${FunctionalPlus_SOURCE_DIR}/include/fplus/fwd_instances.autogenerated_defines"
    "${FunctionalPlus_SOURCE_DIR}/include/fplus/generate.hpp"
    "${FunctionalPlus_SOURCE_DIR}/include/fplus/internal/apply.hpp"
    "${FunctionalPlus_SOURCE_DIR}/include/fplus/internal/asserts/composition.hpp"
    "${FunctionalPlus_SOURCE_DIR}/include/fplus/internal/asserts/functions.hpp"
    "${FunctionalPlus_SOURCE_DIR}/include/fplus/internal/asserts/pairs.hpp"
    "${FunctionalPlus_SOURCE_DIR}/include/fplus/internal/compare.hpp"
    "${FunctionalPlus_SOURCE_DIR}/include/fplus/internal/composition.hpp"
    "${FunctionalPlus_SOURCE_DIR}/include/fplus/internal/container_common.hpp"
    "${FunctionalPlus_SOURCE_DIR}/include/fplus/internal/function_traits_asserts.hpp"
    "${FunctionalPlus_SOURCE_DIR}/include/fplus/internal/invoke.hpp"
    "${FunctionalPlus_SOURCE_DIR}/include/fplus/internal/meta.hpp"
    "${FunctionalPlus_SOURCE_DIR}/include/fplus/internal/split.hpp"
    "${FunctionalPlus_SOURCE_DIR}/include/fplus/interpolate.hpp"
    "${FunctionalPlus_SOURCE_DIR}/include/fplus/maps.hpp"
    "${FunctionalPlus_SOURCE_DIR}/include/fplus/maybe.hpp"
    "${FunctionalPlus_SOURCE_DIR}/include/fplus/numeric.hpp"
    "${FunctionalPlus_SOURCE_DIR}/include/fplus/optimize.hpp"
    "${FunctionalPlus_SOURCE_DIR}/include/fplus/pairs.hpp"
    "${FunctionalPlus_SOURCE_DIR}/include/fplus/queue.hpp"
    "${FunctionalPlus_SOURCE_DIR}/include/fplus/raii.hpp"
    "${FunctionalPlus_SOURCE_DIR}/include/fplus/read.hpp"
    "${FunctionalPlus_SOURCE_DIR}/include/fplus/replace.hpp"
    "${FunctionalPlus_SOURCE_DIR}/include/fplus/result.hpp"
    "${FunctionalPlus_SOURCE_DIR}/include/fplus/search.hpp"
    "${FunctionalPlus_SOURCE_DIR}/include/fplus/sets.hpp"
    "${FunctionalPlus_SOURCE_DIR}/include/fplus/shared_ref.hpp"
    "${FunctionalPlus_SOURCE_DIR}/include/fplus/show.hpp"
    "${FunctionalPlus_SOURCE_DIR}/include/fplus/side_effects.hpp"
    "${FunctionalPlus_SOURCE_DIR}/include/fplus/split.hpp"
    "${FunctionalPlus_SOURCE_DIR}/include/fplus/stopwatch.hpp"
    "${FunctionalPlus_SOURCE_DIR}/include/fplus/string_tools.hpp"
    "${FunctionalPlus_SOURCE_DIR}/include/fplus/timed.hpp"
    "${FunctionalPlus_SOURCE_DIR}/include/fplus/transform.hpp"
    "${FunctionalPlus_SOURCE_DIR}/include/fplus/tree.hpp"
    "${FunctionalPlus_SOURCE_DIR}/include/fplus/variant.hpp"
)

file(
  WRITE
  "${PROJECT_BINARY_DIR}/fplus_sources.generated.cpp"
  "// Generated by CMake, DO NOT EDIT\n"
)
add_executable(
    fplus_sources
    EXCLUDE_FROM_ALL
    "${PROJECT_BINARY_DIR}/fplus_sources.generated.cpp"
    ${fplus_headers}
)
target_link_libraries(fplus_sources PRIVATE FunctionalPlus::fplus)
